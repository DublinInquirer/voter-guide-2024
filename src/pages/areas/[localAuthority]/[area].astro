---
import lodash from "lodash";
import { marked } from "marked";

import {
  airtableClient,
  getLookupFieldValue,
  getStringFieldValue,
  getOptionalLookupFieldValue,
  getOptionalStringFieldValue,
  getLookupFieldMultipleValues,
} from "../../../airtable-api";
import Layout from "../../../layouts/Layout.astro";
import HeaderSection from "../../../components/HeaderSection.astro";
import HeaderTitle from "../../../components/HeaderTitle.astro";
import QuestionText from "../../../components/QuestionText.astro";
import Link from "../../../components/Link.astro";
import AreaSelector from "../../../components/AreaSelector.astro";
import CandidateAvatar from "../../../components/CandidateAvatar.astro";
import { getAreasByLocalAuthority } from "../../../utils";

export async function getStaticPaths() {
  const candidateRecords = await airtableClient("Candidates")
    .select({
      view: "Grid view",
    })
    .all();

  const electoralAreas = await airtableClient("Areas")
    .select({
      view: "Grid view",
    })
    .all();

  const { dccElectoralAreaNames, fingalElectoralAreaNames } =
    getAreasByLocalAuthority(electoralAreas);

  const questionRecords = await airtableClient("Questions")
    .select({
      view: "Grid view",
    })
    .all();

  const answers = await airtableClient("Answers")
    .select({
      view: "Grid view",
    })
    .all();

  return electoralAreas.map((electoralAreaRecord) => {
    const electoralAreaName = getStringFieldValue(electoralAreaRecord, "Name");

    const questions = questionRecords
      .filter(
        (questionRecord) =>
          getLookupFieldValue(questionRecord, "Local authority name") ===
          getLookupFieldValue(electoralAreaRecord, "Local Authority Name"),
      )
      .map((questionRecord) => {
        const answersForQuestion = answers.filter((answerRecord) => {
          const candidateId = getLookupFieldValue(answerRecord, "Candidate");
          const candidateRecord = candidateRecords.find(
            ({ id }) => id === candidateId,
          );
          if (!candidateRecord) {
            return false;
          } else {
            const candidateAreas = getLookupFieldMultipleValues(
              candidateRecord,
              "Areas",
            );
            return (
              candidateAreas.includes(electoralAreaRecord.id) &&
              answerRecord.get("Question")?.toString() === questionRecord.id
            );
          }
        });
        return {
          text: getStringFieldValue(questionRecord, "Text"),
          answers: answersForQuestion
            .map((answerRecord) => {
              const candidateId = getLookupFieldValue(
                answerRecord,
                "Candidate",
              );
              const candidateRecord = candidateRecords.find(
                ({ id }) => id === candidateId,
              );
              const answer = getOptionalStringFieldValue(answerRecord, "Text");
              return {
                candidateRecord,
                answer,
              };
            })
            .sort((a, b) => {
              if (
                getStringFieldValue(a.candidateRecord!, "Lastname") <
                getStringFieldValue(b.candidateRecord!, "Lastname")
              ) {
                return -1;
              }

              if (
                getStringFieldValue(a.candidateRecord!, "Lastname") >
                getStringFieldValue(b.candidateRecord!, "Lastname")
              ) {
                return 1;
              }

              return 0;
            }),
        };
      });

    const hasAnswers = questions.some((question) =>
      question.answers.some((answer) => Boolean(answer.answer)),
    );

    return {
      params: {
        localAuthority: lodash.kebabCase(
          getLookupFieldValue(electoralAreaRecord, "Local Authority Name"),
        ),
        area: lodash.kebabCase(electoralAreaName),
      },
      props: {
        area: electoralAreaName,
        questions,
        hasAnswers,
        dccElectoralAreaNames,
        fingalElectoralAreaNames,
      },
    };
  });
}

const {
  area,
  questions,
  hasAnswers,
  dccElectoralAreaNames,
  fingalElectoralAreaNames,
} = Astro.props;
---

<Layout title={area}>
  <HeaderSection>
    <HeaderTitle>{area}</HeaderTitle>
    <AreaSelector
      dccElectoralAreaNames={dccElectoralAreaNames}
      fingalElectoralAreaNames={fingalElectoralAreaNames}
    />
  </HeaderSection>
  <main class="px-gutter max-w-screen-md mx-auto">
    {
      hasAnswers ? (
        questions.map((question) => (
          <>
            <QuestionText>{question.text}</QuestionText>
            {question.answers.map((answer) => {
              const candidateFullName = answer.candidateRecord
                ? getStringFieldValue(answer.candidateRecord, "Full name")
                : "";
              const candidateProfilePictureUrl = answer.candidateRecord
                ? getStringFieldValue(answer.candidateRecord, "Profile picture")
                : undefined;
              const candidatePartyname = answer.candidateRecord
                ? getLookupFieldValue(answer.candidateRecord, "Party name")
                : "";
              return (
                <>
                  <div class="flex">
                    <div class="-ml-1 mr-2">
                      <CandidateAvatar
                        candidateFullName={candidateFullName}
                        profilePictureUrl={candidateProfilePictureUrl}
                        showName={false}
                      />
                    </div>
                    <div class="self-center">
                      <h3>
                        <Link
                          to={`candidates/${lodash.kebabCase(candidateFullName)}`}
                        >
                          {candidateFullName}
                        </Link>
                      </h3>
                      <h3>{candidatePartyname}</h3>
                    </div>
                  </div>
                  <div
                    class="pb-4 markdown"
                    set:html={marked.parse(answer.answer ?? "")}
                  />
                </>
              );
            })}
          </>
        ))
      ) : (
        <p>No candidates in this area have provided answers yet.</p>
      )
    }
  </main>
</Layout>

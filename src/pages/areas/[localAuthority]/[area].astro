---
import lodash from "lodash";

import {
  airtableClient,
  getLookupFieldValue,
  getStringFieldValue,
} from "../../../airtable-api";
import Layout from "../../../layouts/Layout.astro";
import HeaderSection from "../../../components/HeaderSection.astro";
import HeaderTitle from "../../../components/HeaderTitle.astro";
import QuestionText from "../../../components/QuestionText.astro";
import Link from "../../../components/Link.astro";
import AreaSelector from "../../../components/AreaSelector.astro";
import { getAreasByLocalAuthority } from "../../../utils";

export async function getStaticPaths() {
  const electoralAreas = await airtableClient("Areas")
    .select({
      view: "Grid view",
    })
    .all();

  const { dccElectoralAreaNames, fingalElectoralAreaNames } =
    getAreasByLocalAuthority(electoralAreas);

  const questionRecords = await airtableClient("Questions")
    .select({
      view: "Grid view",
    })
    .all();

  const answers = await airtableClient("Answers")
    .select({
      view: "Grid view",
    })
    .all();

  return electoralAreas.map((electoralAreaRecord) => {
    const electoralAreaName = getStringFieldValue(electoralAreaRecord, "Name");

    const questions = questionRecords
      .filter(
        (questionRecord) =>
          getLookupFieldValue(questionRecord, "Local authority name") ===
          getLookupFieldValue(electoralAreaRecord, "Local Authority Name")
      )
      .map((questionRecord) => {
        const answersForQuestion = answers.filter(
          (answerRecord) =>
            getLookupFieldValue(answerRecord, "Candidate area name") ===
              electoralAreaName &&
            answerRecord.get("Question")?.toString() === questionRecord.id
        );
        return {
          text: getStringFieldValue(questionRecord, "Text"),
          answers: answersForQuestion.map((answerRecord) => {
            const candidateFullName = getLookupFieldValue(
              answerRecord,
              "Candidate full name"
            );
            const answer = getStringFieldValue(answerRecord, "Text");
            return {
              candidateFullName,
              answer,
            };
          }),
        };
      });

    const hasAnswers = questions.some((question) =>
      question.answers.some((answer) => Boolean(answer.answer))
    );

    return {
      params: {
        localAuthority: lodash.kebabCase(
          getLookupFieldValue(electoralAreaRecord, "Local Authority Name")
        ),
        area: lodash.kebabCase(electoralAreaName),
      },
      props: {
        area: electoralAreaName,
        questions,
        hasAnswers,
        dccElectoralAreaNames,
        fingalElectoralAreaNames,
      },
    };
  });
}

const {
  area,
  questions,
  hasAnswers,
  dccElectoralAreaNames,
  fingalElectoralAreaNames,
} = Astro.props;
---

<Layout>
  <HeaderSection>
    <HeaderTitle>{area}</HeaderTitle>
    <AreaSelector
      dccElectoralAreaNames={dccElectoralAreaNames}
      fingalElectoralAreaNames={fingalElectoralAreaNames}
    />
  </HeaderSection>
  <main class="px-gutter">
    {
      hasAnswers ? (
        questions.map((question) => (
          <>
            <QuestionText>{question.text}</QuestionText>
            {question.answers.map((answer) => (
              <>
                <h3>
                  <Link
                    to={`candidates/${lodash.kebabCase(answer.candidateFullName)}`}
                  >
                    {answer.candidateFullName}
                  </Link>
                </h3>
                <p>{answer.answer}</p>
              </>
            ))}
          </>
        ))
      ) : (
        <p>No candidates in this area have provided answers yet.</p>
      )
    }
  </main>
</Layout>

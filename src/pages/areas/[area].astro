---
import lodash from "lodash";
import { google } from "googleapis";
import { z } from "zod";

import { authorize } from "../../google-api";
import { getCandidateFullName } from "../../utils";
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import HeaderTitle from "../../components/HeaderTitle.astro";
import QuestionText from "../../components/QuestionText.astro";
import Link from "../../components/Link.astro";

export async function getStaticPaths() {
  const electoralAreasSchema = z.array(z.string());
  const questionsSchema = z.array(z.string());
  const candidatesAnswersSchema = z.array(z.array(z.string()));
  const auth = await authorize();
  const sheets = google.sheets({ version: "v4", auth });
  const electoralAreasResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "areas!A1:A11",
  });

  const electoralAreasFromSheet =
    electoralAreasResponse.data.values?.map((row) => row[0]) ?? [];

  const questionsResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "questions!A1:A10",
  });

  const questionsFromSheet =
    questionsResponse.data.values?.map((row) => row[0]) ?? [];

  const candidatesAnswersResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "answers!A2:M",
  });

  const candidatesAnswersFromSheet =
    candidatesAnswersResponse.data.values ?? [];

  try {
    const electoralAreas = electoralAreasSchema.parse(electoralAreasFromSheet);
    const questionsList = questionsSchema.parse(questionsFromSheet);
    const candidatesAnswers = candidatesAnswersSchema.parse(
      candidatesAnswersFromSheet
    );

    return electoralAreas.map((electoralArea) => {
      const candidatesAnswersForArea = candidatesAnswers.filter(
        (row) => row[2] === electoralArea
      );
      const answersListByCandidate = candidatesAnswersForArea
        .map((row) => {
          return {
            candidate: {
              firstname: row[0],
              lastname: row[1],
            },
            answers: row.slice(3),
          };
        })
        .reduce<Record<string, string[]>>((acc, { candidate, answers }) => {
          return {
            ...acc,
            [getCandidateFullName(candidate)]: answers,
          };
        }, {});

      const questions = questionsList.map((question, index) => {
        return {
          text: question,
          answers: candidatesAnswersForArea.map((row) => {
            const candidateFullName = getCandidateFullName({
              firstname: row[0],
              lastname: row[1],
            });
            return {
              candidateFullName,
              answer: answersListByCandidate[candidateFullName][index],
            };
          }),
        };
      });

      return {
        params: {
          area: lodash.kebabCase(electoralArea),
        },
        props: {
          area: electoralArea,
          questions,
        },
      };
    });
  } catch (error) {
    console.error(error);
    return [];
  }
}

const { area, questions } = Astro.props;
---

<Layout>
  <HeaderSection>
    <HeaderTitle>{area}</HeaderTitle>
  </HeaderSection>
  <main class="px-gutter">
    {
      questions.map((question) => (
        <>
          <QuestionText>{question.text}</QuestionText>
          {question.answers.map((answer) => (
            <>
              <h3>
                <Link
                  target={`candidates/${lodash.kebabCase(answer.candidateFullName)}`}
                >
                  {answer.candidateFullName}
                </Link>
              </h3>
              <p>{answer.answer}</p>
            </>
          ))}
        </>
      ))
    }
  </main>
</Layout>

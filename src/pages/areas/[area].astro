---
import lodash from "lodash";
import { google } from "googleapis";
import { z } from "zod";

import { authorize } from "../../google-api";

export async function getStaticPaths() {
  const electoralAreasSchema = z.array(z.string());
  const questionsSchema = z.array(z.string());
  const candidatesAnswersSchema = z.array(z.array(z.string()));
  const auth = await authorize();
  const sheets = google.sheets({ version: "v4", auth });
  const electoralAreasResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "areas!A1:A11",
  });

  const electoralAreasFromSheet =
    electoralAreasResponse.data.values?.map((row) => row[0]) ?? [];

  const questionsResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "questions!A1:A10",
  });

  const questionsFromSheet =
    questionsResponse.data.values?.map((row) => row[0]) ?? [];

  const candidatesAnswersResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "answers!A2:L",
  });

  const candidatesAnswersFromSheet =
    candidatesAnswersResponse.data.values ?? [];

  try {
    const electoralAreas = electoralAreasSchema.parse(electoralAreasFromSheet);
    const questionsList = questionsSchema.parse(questionsFromSheet);
    const candidatesAnswers = candidatesAnswersSchema.parse(
      candidatesAnswersFromSheet
    );

    return electoralAreas.map((electoralArea) => {
      const candidatesAnswersForArea = candidatesAnswers.filter(
        (row) => row[1] === electoralArea
      );
      const answersListByCandidate = candidatesAnswersForArea
        .map((row) => {
          return {
            candidateName: row[0],
            answers: row.slice(2),
          };
        })
        .reduce<Record<string, string[]>>((acc, { candidateName, answers }) => {
          return {
            ...acc,
            [candidateName]: answers,
          };
        }, {});

      const questions = questionsList.map((question, index) => {
        return {
          text: question,
          answers: candidatesAnswersForArea.map((row) => {
            return {
              candidateName: row[0],
              answer: answersListByCandidate[row[0]][index],
            };
          }),
        };
      });

      return {
        params: {
          area: lodash.kebabCase(electoralArea),
        },
        props: {
          area: electoralArea,
          questions,
        },
      };
    });
  } catch (error) {
    console.error(error);
    return [];
  }
}

const { area, questions } = Astro.props;
---

<h1>{area}</h1>

{
  questions.map((question) => (
    <>
      <h2>{question.text}</h2>
      {question.answers.map((answer) => (
        <>
          <h3>{answer.candidateName}</h3>
          <p>{answer.answer}</p>
        </>
      ))}
    </>
  ))
}

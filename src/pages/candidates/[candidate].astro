---
import lodash from "lodash";
import { marked } from "marked";

import {
  airtableClient,
  getLookupFieldValue,
  getOptionalLookupFieldValue,
  getOptionalStringFieldValue,
  getStringFieldValue,
} from "../../airtable-api";
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import HeaderTitle from "../../components/HeaderTitle.astro";
import HeaderSubtitle from "../../components/HeaderSubtitle.astro";
import QuestionText from "../../components/QuestionText.astro";
import Link from "../../components/Link.astro";
import CandidateAvatar from "../../components/CandidateAvatar.astro";

export async function getStaticPaths() {
  const candidates = await airtableClient("Candidates")
    .select({
      view: "Grid view",
    })
    .all();

  const questionRecords = await airtableClient("Questions")
    .select({
      view: "Grid view",
    })
    .all();

  const answerRecords = await airtableClient("Answers")
    .select({
      view: "Grid view",
    })
    .all();

  return candidates.map((candidateRecord) => {
    const candidateFullName = getStringFieldValue(candidateRecord, "Full name");
    const candidateEmail = getOptionalStringFieldValue(
      candidateRecord,
      "Email"
    );
    const candidatePartyName = getLookupFieldValue(
      candidateRecord,
      "Party name"
    );
    const candidateAreaName = getLookupFieldValue(candidateRecord, "Area name");
    const candidateAreaLocalAuthorityName = getLookupFieldValue(
      candidateRecord,
      "Area local authority name"
    );
    const candidateProfilePictureUrl = getOptionalStringFieldValue(
      candidateRecord,
      "Profile picture"
    );

    const questions = questionRecords
      .filter(
        (questionRecord) =>
          getLookupFieldValue(questionRecord, "Local authority name") ===
          getLookupFieldValue(candidateRecord, "Area local authority name")
      )
      .map((questionRecord) => {
        const answerRecord = answerRecords.filter((answerRecord) => {
          return (
            getOptionalLookupFieldValue(answerRecord, "Candidate full name") ===
              candidateFullName &&
            answerRecord.get("Question")?.toString() === questionRecord.id
          );
        })[0];
        return {
          text: getStringFieldValue(questionRecord, "Text"),
          answer: answerRecord
            ? getStringFieldValue(answerRecord, "Text")
            : undefined,
        };
      });

    const hasAnswers = questions.some((question) => Boolean(question.answer));

    return {
      params: {
        candidate: lodash.kebabCase(candidateFullName),
      },
      props: {
        candidateFullName,
        candidateEmail,
        candidatePartyName,
        candidateAreaName,
        candidateAreaLocalAuthorityName,
        candidateProfilePictureUrl,
        questions,
        hasAnswers,
      },
    };
  });
}

const {
  candidateFullName,
  candidateEmail,
  candidatePartyName,
  candidateAreaName,
  candidateAreaLocalAuthorityName,
  candidateProfilePictureUrl,
  questions,
  hasAnswers,
} = Astro.props;
---

<Layout>
  <HeaderSection>
    <div class="flex place-content-center">
      <CandidateAvatar
        candidateFullName={candidateFullName}
        profilePictureUrl={candidateProfilePictureUrl}
        showName={false}
      />
    </div>
    <HeaderTitle>{candidateFullName}</HeaderTitle>
    <HeaderSubtitle>
      {candidatePartyName} candidate for
      <Link
        to={`areas/${lodash.kebabCase(candidateAreaLocalAuthorityName)}/${lodash.kebabCase(candidateAreaName)}`}
      >
        {candidateAreaName}
      </Link>
    </HeaderSubtitle>
  </HeaderSection>
  <main class="px-gutter">
    {
      hasAnswers ? (
        questions.map((question) => (
          <>
            <QuestionText>{question.text}</QuestionText>
            <div
              class="pb-4 markdown"
              set:html={marked.parse(question.answer ?? "")}
            />
          </>
        ))
      ) : (
        <>
          <p class="mb-4">
            {candidateFullName} hasn't yet responded to our questionnaire. If{" "}
            {candidateAreaName} is your local electoral area, why not send them
            an email reminding them to submit their responses?
          </p>
          <p>
            <a
              class="underline"
              href={`mailto:${candidateEmail}?cc=sam@dublininquirer.com&subject=Dublin Inquirer questionnaire&body=I am a voter in ${candidateAreaName} and I am interested in your responses to the questions on Dublin Inquirer's local election voter guide.`}
            >
              Email {candidateFullName}
            </a>
          </p>
        </>
      )
    }
  </main>
</Layout>

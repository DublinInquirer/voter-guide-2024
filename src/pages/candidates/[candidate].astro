---
import lodash from "lodash";
import { google } from "googleapis";
import { z } from "zod";

import { authorize } from "../../google-api";
import { getCandidateFullName } from "../../utils";
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import HeaderTitle from "../../components/HeaderTitle.astro";
import HeaderSubtitle from "../../components/HeaderSubtitle.astro";
import QuestionText from "../../components/QuestionText.astro";

export async function getStaticPaths() {
  const candidatesSchema = z.array(
    z.object({
      firstname: z.string(),
      lastname: z.string(),
      area: z.string(),
    })
  );
  const questionsSchema = z.array(z.string());
  const candidatesAnswersSchema = z.array(z.array(z.string()));
  const auth = await authorize();
  const sheets = google.sheets({ version: "v4", auth });
  const candidatesResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "candidates!A2:C",
  });

  const candidatesFromSheet =
    candidatesResponse.data.values?.map(([firstname, lastname, area]) => ({
      firstname,
      lastname,
      area,
    })) ?? [];

  const questionsResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "questions!A1:A10",
  });

  const questionsFromSheet =
    questionsResponse.data.values?.map((row) => row[0]) ?? [];

  const candidatesAnswersResponse = await sheets.spreadsheets.values.get({
    spreadsheetId: import.meta.env.SHEET_ID,
    range: "answers!A2:M",
  });

  const candidatesAnswersFromSheet =
    candidatesAnswersResponse.data.values ?? [];

  try {
    const candidates = candidatesSchema.parse(candidatesFromSheet);
    const questionsList = questionsSchema.parse(questionsFromSheet);
    const candidatesAnswers = candidatesAnswersSchema.parse(
      candidatesAnswersFromSheet
    );

    return candidates.map((candidate) => {
      const candidatesAnswersForArea = candidatesAnswers.filter(
        (row) =>
          row[0] === candidate.firstname &&
          row[1] === candidate.lastname &&
          row[2] === candidate.area
      );
      const answersListByCandidate = candidatesAnswersForArea
        .map((row) => {
          return {
            candidate: {
              firstname: row[0],
              lastname: row[1],
            },
            answers: row.slice(3),
          };
        })
        .reduce<Record<string, string[]>>((acc, { candidate, answers }) => {
          return {
            ...acc,
            [getCandidateFullName(candidate)]: answers,
          };
        }, {});

      const questions = questionsList.map((question, index) => {
        return {
          text: question,
          answers: candidatesAnswersForArea.map((row) => {
            const candidateFullName = getCandidateFullName({
              firstname: row[0],
              lastname: row[1],
            });
            return {
              candidateFullName,
              answer: answersListByCandidate[candidateFullName][index],
            };
          }),
        };
      });

      return {
        params: {
          candidate: lodash.kebabCase(getCandidateFullName(candidate)),
        },
        props: {
          candidate,
          questions,
        },
      };
    });
  } catch (error) {
    console.error(error);
    return [];
  }
}

const { candidate, questions } = Astro.props;
---

<Layout>
  <HeaderSection>
    <HeaderTitle>{getCandidateFullName(candidate)}</HeaderTitle>
    <HeaderSubtitle>
      Candidate for <a
        href={`${import.meta.env.BASE_URL}/areas/${lodash.kebabCase(candidate.area)}`}
        class="underline">{candidate.area}</a
      >
    </HeaderSubtitle>
  </HeaderSection>
  <main class="px-gutter">
    {
      questions.map((question) => (
        <>
          <QuestionText>{question.text}</QuestionText>
          {question.answers.map((answer) => (
            <p class="pb-2">{answer.answer}</p>
          ))}
        </>
      ))
    }
  </main>
</Layout>

---
import { type Record as AirtableRecord, type FieldSet } from "airtable";
import lodash from "lodash";

import {
  airtableClient,
  getLookupFieldValue,
  getStringFieldValue,
} from "../../airtable-api";
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import HeaderTitle from "../../components/HeaderTitle.astro";
import HeaderSubtitle from "../../components/HeaderSubtitle.astro";
import QuestionText from "../../components/QuestionText.astro";
import Link from "../../components/Link.astro";

export async function getStaticPaths() {
  const candidates = await airtableClient("Candidates")
    .select({
      view: "Grid view",
    })
    .all();

  const questions = await airtableClient("Questions")
    .select({
      view: "Grid view",
    })
    .all();

  const questionsList = questions.map((record) =>
    getStringFieldValue(record, "Text")
  );

  const candidatesAnswers = await airtableClient("Answers")
    .select({
      view: "Grid view",
    })
    .all();

  return candidates.map((candidateRecord) => {
    const candidateFullName = getStringFieldValue(candidateRecord, "Full name");
    const candidateAreaName = getLookupFieldValue(candidateRecord, "Area name");
    const candidateAreaLocalAuthorityName = getLookupFieldValue(
      candidateRecord,
      "Area local authority name"
    );
    const candidatesAnswersForArea = candidatesAnswers.filter(
      (answerRecord) =>
        getLookupFieldValue(answerRecord, "Candidate") === candidateRecord.id
    );

    const answersListByCandidate = candidatesAnswersForArea.reduce<
      Record<string, AirtableRecord<FieldSet>[]>
    >((acc, answerRecord) => {
      const candidateFullName = getLookupFieldValue(
        answerRecord,
        "Candidate full name"
      );
      const candidateAnswers = candidatesAnswersForArea.filter(
        (candidatesAnswersForAreaRecord) =>
          getLookupFieldValue(
            candidatesAnswersForAreaRecord,
            "Candidate full name"
          ) === candidateFullName
      );
      return {
        ...acc,
        [candidateFullName]: candidateAnswers,
      };
    }, {});

    const questions = questionsList.map((question, index) => {
      return {
        text: question,
        answers: candidatesAnswersForArea.map((answerRecord) => {
          const candidateFullName = getLookupFieldValue(
            answerRecord,
            "Candidate full name"
          );
          const answer =
            answersListByCandidate[candidateFullName][index] &&
            getStringFieldValue(
              answersListByCandidate[candidateFullName][index],
              "Text"
            );
          return {
            candidateFullName,
            answer,
          };
        }),
      };
    });

    return {
      params: {
        candidate: lodash.kebabCase(candidateFullName),
      },
      props: {
        candidateFullName,
        candidateAreaName,
        candidateAreaLocalAuthorityName,
        questions,
      },
    };
  });
}

const {
  candidateFullName,
  candidateAreaName,
  candidateAreaLocalAuthorityName,
  questions,
} = Astro.props;
---

<Layout>
  <HeaderSection>
    <HeaderTitle>{candidateFullName}</HeaderTitle>
    <HeaderSubtitle>
      Candidate for
      <Link
        to={`areas/${lodash.kebabCase(candidateAreaLocalAuthorityName)}/${lodash.kebabCase(candidateAreaName)}`}
      >
        {candidateAreaName}
      </Link>
    </HeaderSubtitle>
  </HeaderSection>
  <main class="px-gutter">
    {
      questions.map((question) => (
        <>
          <QuestionText>{question.text}</QuestionText>
          {question.answers.map((answer) => (
            <p class="pb-2">{answer.answer}</p>
          ))}
        </>
      ))
    }
  </main>
</Layout>

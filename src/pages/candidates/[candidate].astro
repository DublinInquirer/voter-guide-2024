---
import lodash from "lodash";
import { marked } from "marked";
import type { FieldSet, Record as AirtableRecord } from "airtable";

import {
  airtableClient,
  getLookupFieldValue,
  getLookupFieldMultipleValues,
  getOptionalLookupFieldValue,
  getOptionalStringFieldValue,
  getStringFieldValue,
} from "../../airtable-api";
import Layout from "../../layouts/Layout.astro";
import HeaderSection from "../../components/HeaderSection.astro";
import HeaderTitle from "../../components/HeaderTitle.astro";
import HeaderSubtitle from "../../components/HeaderSubtitle.astro";
import QuestionText from "../../components/QuestionText.astro";
import Link from "../../components/Link.astro";
import CandidateAvatar from "../../components/CandidateAvatar.astro";
import CopyButton from "../../components/CopyButton.astro";

export async function getStaticPaths() {
  const candidates = await airtableClient("Candidates")
    .select({
      view: "Grid view",
    })
    .all();

  const areaRecords = await airtableClient("Areas")
    .select({
      view: "Grid view",
    })
    .all();

  const questionRecords = await airtableClient("Questions")
    .select({
      view: "Grid view",
    })
    .all();

  const answerRecords = await airtableClient("Answers")
    .select({
      view: "Grid view",
    })
    .all();

  return candidates.map((candidateRecord) => {
    const candidateFullName = getStringFieldValue(candidateRecord, "Full name");
    const candidateEmail = getOptionalStringFieldValue(
      candidateRecord,
      "Email",
    );
    const candidatePartyName = getLookupFieldValue(
      candidateRecord,
      "Party name",
    );
    const candidateAreaNames = getLookupFieldMultipleValues(
      candidateRecord,
      "Areas",
    )
      .map((areaId) => {
        return areaRecords.find(({ id }) => areaId === id);
      })
      .filter((areaRecord): areaRecord is AirtableRecord<FieldSet> =>
        Boolean(areaRecord),
      )
      .map((areaRecord) => getStringFieldValue(areaRecord, "Name"));
    const candidateAreaLocalAuthorityName = getLookupFieldValue(
      candidateRecord,
      "Area local authority name",
    );
    const candidateProfilePictureUrl = getOptionalStringFieldValue(
      candidateRecord,
      "Profile picture",
    );

    const questions = questionRecords
      .filter(
        (questionRecord) =>
          getLookupFieldValue(questionRecord, "Local authority name") ===
          getLookupFieldValue(candidateRecord, "Area local authority name"),
      )
      .map((questionRecord) => {
        const answerRecord = answerRecords.filter((answerRecord) => {
          return (
            getOptionalLookupFieldValue(answerRecord, "Candidate full name") ===
              candidateFullName &&
            answerRecord.get("Question")?.toString() === questionRecord.id
          );
        })[0];
        return {
          text: getStringFieldValue(questionRecord, "Text"),
          answer: answerRecord
            ? getOptionalStringFieldValue(answerRecord, "Text")
            : undefined,
        };
      });

    const hasAnswers = questions.some((question) => Boolean(question.answer));

    return {
      params: {
        candidate: lodash.kebabCase(candidateFullName),
      },
      props: {
        candidateFullName,
        candidateEmail,
        candidatePartyName,
        candidateAreaNames,
        candidateAreaLocalAuthorityName,
        candidateProfilePictureUrl,
        questions,
        hasAnswers,
      },
    };
  });
}

const organizationEmail = "sam@dublininquirer.com";

function suggestedEmailMessage(area: string) {
  return `I am a voter in ${area} and I am interested in your responses to the questions on Dublin Inquirer's local election voter guide.\n\nI think it'd be worth your time to write up and send in your answers to their eight questions. They published a similar voter guide for the 2019 locals, and more than 40,000 people read it.\n\nHopefully you got an email about this project from Dublin Inquirer deputy editor Sam Tranum in recent weeks, but if you haven't or you'd like more information or anything, he's cc'd here.`;
}

const {
  candidateFullName,
  candidateEmail,
  candidatePartyName,
  candidateAreaNames,
  candidateAreaLocalAuthorityName,
  candidateProfilePictureUrl,
  questions,
  hasAnswers,
} = Astro.props;
---

<Layout title={`${candidateFullName} | ${candidateAreaNames.join(" / ")}`}>
  <HeaderSection>
    <div class="flex place-content-center">
      <CandidateAvatar
        candidateFullName={candidateFullName}
        profilePictureUrl={candidateProfilePictureUrl}
        showName={false}
      />
    </div>
    <HeaderTitle>{candidateFullName}</HeaderTitle>
    <HeaderSubtitle>
      {candidatePartyName} candidate <span class="whitespace-nowrap"
        >for
        {
          candidateAreaNames.map((areaName, index) => (
            <>
              <Link
                to={`areas/${lodash.kebabCase(candidateAreaLocalAuthorityName)}/${lodash.kebabCase(areaName)}`}
              >
                {areaName}
              </Link>
              {index < candidateAreaNames.length - 1 ? " / " : null}
            </>
          ))
        }
      </span>
    </HeaderSubtitle>
  </HeaderSection>
  <main class="px-gutter max-w-screen-md mx-auto">
    {
      hasAnswers ? (
        questions.map((question) => (
          <>
            <QuestionText>{question.text}</QuestionText>
            <div
              class="pb-4 markdown"
              set:html={marked.parse(question.answer ?? "")}
            />
          </>
        ))
      ) : (
        <>
          <p class="mb-4">
            {candidateFullName} hasn't yet responded to our questionnaire. If{" "}
            {candidateAreaNames.join(" / ")} is your local electoral area, why
            not send them an email reminding them to submit their responses?
          </p>
          <p>
            <a
              class="underline lg:hidden"
              href={encodeURI(
                `mailto:${candidateEmail}?cc=sam@dublininquirer.com&subject=Dublin Inquirer questionnaire&body=${suggestedEmailMessage(candidateAreaNames.join(" / "))}`,
              )}
            >
              Email {candidateFullName}
            </a>
            <div class="hidden lg:block">
              <p class="pb-2">
                Email them at{" "}
                <span class="font-mono font-bold">{candidateEmail}</span>
                <CopyButton
                  id="candidate-email-copy-button"
                  text={candidateEmail!}
                />
              </p>
              <p class="pb-2">
                CC us so we can follow up with them at{" "}
                <span class="font-mono font-bold">{organizationEmail}</span>
                <CopyButton
                  id="organization-email-copy-button"
                  text={organizationEmail}
                />
              </p>
              <p class="pb-2">Suggested message:</p>
              {/* prettier-ignore */}
              <textarea class="w-1/2 h-96 p-4 mb-2" readonly>{suggestedEmailMessage(candidateAreaNames.join(' / '))}</textarea>
              <p>
                <CopyButton
                  id="suggested-email-message-copy-button"
                  text={suggestedEmailMessage(candidateAreaNames.join(" / "))}
                />
              </p>
            </div>
          </p>
        </>
      )
    }
  </main>
</Layout>

---
import lodash from "lodash";
import { google } from "googleapis";
import { z } from "zod";

import { getCandidateFullName } from "../utils";
import { authorize } from "../google-api";
import Layout from "../layouts/Layout.astro";
import Link from "../components/Link.astro";

const auth = await authorize();
const sheets = google.sheets({ version: "v4", auth });
const electoralAreasSchema = z.array(z.string());
const electoralAreasResponse = await sheets.spreadsheets.values.get({
  spreadsheetId: import.meta.env.SHEET_ID,
  range: "areas!A1:A11",
});
const electoralAreasFromSheet =
  electoralAreasResponse.data.values?.map((row) => row[0]) ?? [];
const electoralAreas = electoralAreasSchema.parse(electoralAreasFromSheet);

const candidatesSchema = z.array(
  z.object({
    firstname: z.string(),
    lastname: z.string(),
    area: z.string(),
  })
);
const candidatesResponse = await sheets.spreadsheets.values.get({
  spreadsheetId: import.meta.env.SHEET_ID,
  range: "candidates!A2:C",
});
const candidatesFromSheet =
  candidatesResponse.data.values?.map(([firstname, lastname, area]) => ({
    firstname,
    lastname,
    area,
  })) ?? [];
const candidates = candidatesSchema.parse(candidatesFromSheet);
const candidatesByArea = candidates.reduce<Record<string, typeof candidates>>(
  (acc, candidate) => {
    const candidatesInArea = acc[candidate.area]
      ? [...acc[candidate.area], candidate]
      : [candidate];
    return {
      ...acc,
      [candidate.area]: candidatesInArea,
    };
  },
  {}
);
---

<Layout>
  <header class="pt-2 pb-8 px-gutter">
    <h2 class="pb-4">
      We
      <Link
        href="https://dublininquirer.com/2024/03/13/here-are-the-issues-people-say-they-want-us-to-ask-local-election-candidates-about/"
        target="_blank">asked Dubliners</Link
      >
      what they want candidates in the 2024 local elections to talk about as they
      compete for votes, and then posed those questions to the candidates running
      seats on Dublin City Council and Fingal County Council. These are their responses.
    </h2>
    <select
      name="electoral-area"
      class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg p-2 block w-full"
    >
      <option disabled selected>Choose your electoral area</option>
      {
        electoralAreas.map((electoralArea) => (
          <option value={lodash.kebabCase(electoralArea)}>
            {electoralArea}
          </option>
        ))
      }
    </select>
  </header>
  <main class="px-gutter">
    {
      electoralAreas.map((electoralArea) => {
        return (
          <>
            <div>
              <p>{electoralArea}</p>
            </div>
            <div class="flex flex-wrap">
              {candidatesByArea[electoralArea]?.map((candidate) => (
                <div class="p-1">
                  <Link
                    to={`candidates/${lodash.kebabCase(getCandidateFullName(candidate))}`}
                  >
                    <img src="https://picsum.photos/64" class="rounded-full" />
                    <p class="text-xs text-center w-16">
                      {getCandidateFullName(candidate)}
                    </p>
                  </Link>
                </div>
              ))}
            </div>
            <hr />
          </>
        );
      })
    }
  </main>
</Layout>
<script>
  const selectElement = document.querySelector("select[name=electoral-area]");
  selectElement?.addEventListener("change", (event) => {
    window.location.href = `${import.meta.env.BASE_URL}/areas/${(event.target as HTMLSelectElement).value}`;
  });
</script>
